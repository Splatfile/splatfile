create table "public"."capture_requests" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "user_id" uuid not null,
    "completed_at" timestamp without time zone,
    "result_img_url" character varying
);


alter table "public"."capture_requests" enable row level security;

CREATE UNIQUE INDEX apfiy_requests_pkey ON public.capture_requests USING btree (id);

alter table "public"."capture_requests" add constraint "apfiy_requests_pkey" PRIMARY KEY using index "apfiy_requests_pkey";

alter table "public"."capture_requests" add constraint "public_apfiy_requests_user_id_fkey" FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE not valid;

alter table "public"."capture_requests" validate constraint "public_apfiy_requests_user_id_fkey";

grant delete on table "public"."capture_requests" to "anon";

grant insert on table "public"."capture_requests" to "anon";

grant references on table "public"."capture_requests" to "anon";

grant select on table "public"."capture_requests" to "anon";

grant trigger on table "public"."capture_requests" to "anon";

grant truncate on table "public"."capture_requests" to "anon";

grant update on table "public"."capture_requests" to "anon";

grant delete on table "public"."capture_requests" to "authenticated";

grant insert on table "public"."capture_requests" to "authenticated";

grant references on table "public"."capture_requests" to "authenticated";

grant select on table "public"."capture_requests" to "authenticated";

grant trigger on table "public"."capture_requests" to "authenticated";

grant truncate on table "public"."capture_requests" to "authenticated";

grant update on table "public"."capture_requests" to "authenticated";

grant delete on table "public"."capture_requests" to "service_role";

grant insert on table "public"."capture_requests" to "service_role";

grant references on table "public"."capture_requests" to "service_role";

grant select on table "public"."capture_requests" to "service_role";

grant trigger on table "public"."capture_requests" to "service_role";

grant truncate on table "public"."capture_requests" to "service_role";

grant update on table "public"."capture_requests" to "service_role";

create policy "Enable read access for all users"
on "public"."capture_requests"
as permissive
for select
to service_role
using (true);


create policy "access_all_own_requests"
on "public"."capture_requests"
as permissive
for all
to authenticated
using ((auth.uid() = user_id));



