export type JsonType =
  | string
  | number
  | boolean
  | null
  | JsonType[]
  | {
      [key: string]: JsonType;
    };

export async function fetchJsonData(url: string): Promise<JsonType> {
  const response = await fetch(url);

  if (!response.ok) {
    throw new Error(
      `Failed to fetch ${url}: ${response.status} ${response.statusText}`,
    );
  }

  return await response.json();
}

export async function generateConstantOutput(
  targetFilename: string,
  typePrefix: string,
  data: { code: string; labels: { KRko: string } }[],
) {
  let resultSrcText =
    "// This file is auto-generated by scripts/generateConstants\n\n";

  resultSrcText += "export const " + typePrefix + "Codes = [\n";
  resultSrcText += data
    .map((v) => `  "${v.code}", // ${v.labels.KRko}\n`)
    .join("");
  resultSrcText += "] as const;\n\n";

  resultSrcText += "export const " + typePrefix + "CodeToData = {\n";
  resultSrcText += data
    .map((v) => {
      const dataObjectText = JSON.stringify(v).slice(1, -1);
      return `  "${v.code}": {\n${dataObjectText}  },\n`;
    })
    .join("");
  resultSrcText += "} as const;\n\n";

  await Deno.writeTextFile(targetFilename, resultSrcText);
  await new Deno.Command("deno", { args: ["fmt", targetFilename] }).output();
}

export async function generateIndex(
  targetFilenames: string[],
  targetDirname: string,
) {
  let resultSrcText =
    "// This file is auto-generated by scripts/generateConstants\n\n";

  resultSrcText += targetFilenames
    .map((filename) => `export * from "./${filename}"`)
    .join("\n\n");

  const indexFilename = targetDirname + "index.ts";

  await Deno.writeTextFile(indexFilename, resultSrcText);
  await new Deno.Command("deno", { args: ["fmt", indexFilename] }).output();
}
